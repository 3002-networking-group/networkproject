import java.io.*;
import java.security.PublicKey;
import java.util.Random;
import java.util.Arrays;
import java.security.*;
import javax.net.ssl.*;
import java.net.*;
import lib.*;
import java.util.Scanner;


/**
 * Collector Class
 * @author Jesse Fletcher, Caleb Fetzer, Alexander Popoff-Asotoff, Reece Notargiacomo
 * @version 5.9.15
 */

public class Collector extends Node {

	private ECentWallet eCentWallet; // file for holding ecents
	private final static String ECENTWALLET_FILE = "collector.wallet";

	private ServerConnection bank, director;
	private boolean bankConn, dirConn;
	private boolean isExplicit;
	private String collectorType;
	private static final String ALPHABET = "gdbac";
	private static final String NUMALPHABET = "0123456789";
	private static final String CORALPHABET = "abcdefghijklmnopqrstuvwxyz";



	public static void main(String[] args) throws IOException {
		new Collector(args);
	}

	/**
	 * Collector
	 */
	public Collector(String[] args) throws IOException {
		isExplicit=false;
		getArgs(args);
		SSLHandler.declareClientCert("SSL_Certificate","cits3002");

		eCentWallet = new ECentWallet( ECENTWALLET_FILE );

		bankConn = false;
		dirConn = false;

		getServers();
	}
	
	// get arguments for collector
	public void getArgs (String[] args){
		if (args.length==0){
			System.out.println("Please run with collector parameters:");
			System.out.println("-d starts a collector in DNA mode");
			System.out.println("-n starts a collector in Number mode");
			System.out.println("-c starts a collector in Corrupt mode");
			System.out.println("-e allows for explicit data entry");
			System.exit(0);
		}
		
		for(int i=0; i<args.length ; i++){
			if(args[i].equals("-n")){
				collectorType= "NUM";
				System.out.println("Starting collector in Number mode");
			}
			else if(args[i].equals("-d")){
				collectorType= "DNA";
				System.out.println("Starting collector in DNA mode");
			}
			else if(args[i].equals("-c")){
				collectorType="COR";
				System.out.println("Starting collector in Corrupt mode");
			}
			else if(args[i].equals("-e")){
				isExplicit=true;
			}

			else{
				System.out.println("Invalid parameter: " +args[i]);
				System.exit(0);
			}

		}
	
	}

	// getServers loops starting UDP listening until it finds both director and bank addresses
	private void getServers(){	// get bank/dir listening address/port
		while(!bankConn || !dirConn){
			startUDP();		// get addresses from UDP socket

			try{
				Thread.sleep(200);	// .2 sec
			}
			catch (Exception e){}
		}
		start();
	}

	// start connection to director and send data
	private void start(){
		while(bankConn && dirConn){
			try{
				// buy money if broke
				if (eCentWallet.isEmpty())
					buyMoney(100);

				ANNOUNCE(eCentWallet.displayBalance());

				if(initiateWithDirector()) {
					String result = analyse_data(collectorType);
					ALERT("RESULT = " + result);
				}
				try{
					Thread.sleep(5000);	// 5 sec
				}
				catch (Exception e){}

			}catch (IOException e){
				ALERT("Problem with connection: Reaquiring bank/director.");
				bankConn = false;
				dirConn = false;
				getServers();
			}
		}
	}

	// start UDP listens on port 1566 for datagrams containing director or bank server IP and ports
	
	private void startUDP(){
		try{
			DatagramSocket socket = new DatagramSocket(1566);

			byte[] data = new byte[1024];
			DatagramPacket datagram = new DatagramPacket(data, data.length);

			socket.receive(datagram);

			Message packet= new Message(new String(datagram.getData(), 0, datagram.getLength(), "utf-8"));

			switch (packet.getFlagEnum()) {
				case DIR:
					ALERT("Recieved Address:Port UDP from Director");
					directorIPAddress = packet.data.split(";")[0];
					dirPort = Integer.parseInt(packet.data.split(";")[1]);

					dirConn = true;
					break;
				case BANK:
					ALERT("Recieved Address:Port UDP from Bank");
					bankIPAddress = packet.data.split(";")[0];
					bankPort = Integer.parseInt(packet.data.split(";")[1]);

					bankConn = true;
					break;
			}
			if(packet.isEmpty()){
				ALERT("UDP: Error listening for Bank/Director address and port...");
			}
			socket.close();
		}catch (SocketException e){
			ALERT("Error creating socket to listen on: Port 1566 in use");
		}catch (IOException e){
			ALERT("Error receiving datagram from UDP server");
		}
	}

	// buyMoney requests eCents from Bank
	
	private void buyMoney(int amount){

		ALERT("Sending Money Withdrawl Request..");
		String withdrawl_request = MessageFlag.BANK_WIT + ":" + amount;
		boolean sent = false;

		while(!sent)
			try {
				bank = new ServerConnection(bankIPAddress, bankPort);

				sent = bank.send(withdrawl_request);
			} catch (IOException err) {
				ALERT_WITH_DELAY("Could not send request. Retrying...");
			}

		String eCent;
		String[] eCentBuffer = new String[amount];
		int index = 0;

		while(index < amount)
			try {
				eCent = bank.receive();
				eCentBuffer[index++] = eCent;
			} catch (IOException err) {
				ALERT_WITH_DELAY("Connection to bank interrupted");
			}

		bank.close();
		eCentWallet.add(eCentBuffer);
	}

	// initilizes collector with director and checks there is valid data types
	
	private boolean initiateWithDirector()
	{
		String connect_director = MessageFlag.C_INIT + ":" + collectorType;
		String result = "";

		try {
			director = new ServerConnection(directorIPAddress, dirPort);
			result = director.request(connect_director);

		} catch(IOException err) {
			ALERT_WITH_DELAY("Could not contact director");
		}
		
		director.close();
        	return result.equals(MessageFlag.VALID);
	}
	// Verify a public key from Director was issued by bank (must be from analyst)
	
	private boolean verifyPubKey(String pubKey){
		try{
			bank = new ServerConnection(bankIPAddress, bankPort);
			Message result = new Message(bank.request(MessageFlag.PUB_AUT + ":" + pubKey));
			bank.close();

			switch(result.getFlagEnum()) {
				case VALID:
					ALERT("Analyst public key verified.");
					return true;
				case INVALID:
					return false;
			}
		}catch (IOException err) {
			ALERT_WITH_DELAY("Could not verify Public Key");
		}
		return false;

	}
	private String analyse_data(String dataType) throws IOException {

		ALERT("Connected! (Director)");
		boolean returnable = true;

		director = new ServerConnection(directorIPAddress, dirPort);
		String temporary_eCent = eCentWallet.remove();

		try {
			director.send(MessageFlag.EXAM_REQ + ":" + dataType);
			ALERT("Awaiting response/encryption key...");

			// Read response
			Message msg = new Message(director.receive());

			switch (msg.getFlagEnum()) {	// get key from director
				case PUBK:
					if(verifyPubKey(msg.data)){
						PublicKey analyst_public_key = (PublicKey) KeyFromString(msg.data);
						ALERT("Public key received! - " + msg.data.substring(50,80));
						String data = genStringForData();
						ALERT("Encrypting eCent and data!");
						String encrypted_packet = encrypt(temporary_eCent, analyst_public_key);
						// send encrypted eCent
						ALERT("Sending Encrypted Packet");
						
						Message analysis;
						String enCent = director.request(encrypted_packet);

						if(enCent.equals(MessageFlag.VALID)){
							director.send(data);
							analysis = new Message (director.receive());
						}else {
							analysis = new Message(enCent);
						}
						
						ALERT("Receiving response...");

						switch (analysis.getFlagEnum()) {
							case VALID:
								ALERT("VALID Response recieved!");
								director.close();
								return analysis.data;
							case DUP:
								ALERT("Duplicate Ecent! Check wallet integrity");
								break;
							case RET:
								ALERT("Analyst disconnected before depositing Ecent, returning to wallet.");
								eCentWallet.add(temporary_eCent);
								break;
							case INVALID:
								ALERT("Invalid Ecent sent from Wallet, check wallet integrity.");
								break;
							case FAIL:
								ALERT("Could not connect to analyst.");
								break;
							case ERROR:
								ALERT("Analyst disconnected after depositing Ecent - Ecent lost.");
								break;
							default:
								ALERT("Unrecognised Flag!");
						}
					}else{
						ALERT("Public Key not verified! Check director authenticity");
					}
					break;

				case FAIL:	// no analysts avail
					ALERT("No analyst's availiable, returning ecent to wallet.");
					eCentWallet.add(temporary_eCent);
					break;
			}
			director.close();

		} catch(IOException err) {
			// Error in sending
			ALERT("Error: Connection to Director dropped.");
			if(returnable){
				ALERT("Ecent was not deposited, may be returned");
				this.eCentWallet.add( temporary_eCent );
			}else ALERT("Ecent not marked as returnable, possibly lost");
			throw new IOException("Could not analyse data!");
		}

		return null;
	}

	// genStringForData checks the collector type and returns the correct string generator	
	private String genStringForData() {
	
		if (collectorType.equals("DNA"))
			return genDNA();
		if (collectorType.equals("NUM"))
			return genIntString();
		if (collectorType.equals("COR")){
			return genCorruptedString();
		}
		return null;
		
	}
	
	// generate corrupted string
	private String genCorruptedString() {
		String corruptedString = "";
		Random r = new Random();
		int min = 10;
		int max = 20;
		// array of random numbers used
		int[] randomNums = new int[max+1];
		// randomString length
		int randomLength = min + r.nextInt((max - min) +1);
		// populate the array
		for (int i = 0; i < 10; i++) {
			randomNums[i] = r.nextInt((10 - 0) +1);
		}
		// generate a "corrupted string" of values
		for (int i = 0; i < randomLength; i++) {
			corruptedString += Character.toString(CORALPHABET.charAt(r.nextInt(CORALPHABET.length())));
			if ((i == randomNums[i] ) || (i/2 == randomNums[i]) ) {
				// replace the character with an X
				corruptedString = corruptedString.replace(String.valueOf(corruptedString.charAt(i)),"X");
				continue;
			}
		}
		System.out.println("Sending random corrupt string: " + corruptedString);
		return corruptedString;
	}

	// generate integer string
	private String genIntString() {
		if (!isExplicit){
			return genRandomInt();
		}
		Boolean validNum = false;
		String input=null;
		ALERT("\n");
		ALERT("Ready for number collection!");
		ALERT("Valid number characters: " + NUMALPHABET);
		ALERT("Enter a number string...");

		while(!validNum){
			Scanner scan = new Scanner(System.in);
			input = scan.nextLine();	
			char[] checker = input.toCharArray();
			validNum=true;
			for (char c: checker){
				if(!(c>=0&&c<=9)){
					validNum=false;
				}
			}	
			ALERT("Not a string of numbers, allowed numbers: " + NUMALPHABET);	
		}		
		return input;

	}

	// generate random integer string
	private String genRandomInt(){
		Random r = new Random();
		String randomStringOfIntegers = "";
		// ranges of randomintstring
		int min = 10;
		int max = 60;

		int randomLength = 0;
		randomLength = min + r.nextInt((max - min) +1);
		for(int i = 0; i < randomLength; i++)
		randomStringOfIntegers += Character.toString(NUMALPHABET.charAt(r.nextInt(NUMALPHABET.length())));
		ALERT("Sending random string of integers: " + randomStringOfIntegers);
		return randomStringOfIntegers;
	}

	// generate DNA string (isExplicit determines user input)
	private String genDNA(){
		
		if (!isExplicit){
			return genRandomDNA();
		}	
		Boolean validCharacters = false;

		String input=null;
		ALERT("\n");
		ALERT("Ready for DNA collection!");
		ALERT("Valid DNA characters: " + ALPHABET);
		ALERT("Enter a valid DNA Pattern and String in: the format Pattern-String");

		while(!validCharacters){
			ALERT("WHAT");
			Scanner scan = new Scanner(System.in);
			input = scan.nextLine();	
			char[] checker = input.toCharArray();
			for (char c: checker){
				validCharacters = ((c=='g') || (c=='d') || (c=='b') || (c=='a') || (c=='c') || (c=='-'));
			}
			//checks to make sure input string is valid
			if (!validCharacters){
				System.out.println("Not a valid DNA character. Allowable characters are " + ALPHABET);
			}		
			if (!input.contains("-" )){
				System.out.println("Incorrect format. Correct format is: Pattern-String");
				validCharacters=false;
			}
		}		
		return input;
	}

	// generate random DNA sequence from alphabet
	private String genRandomDNA(){
		Random r = new Random();
		String randomPattern = new String();
		String randomString = new String();
		int min = 10;
		int max = 100;

		int randomLength = 0;
		randomLength = min + r.nextInt((max - min) +1);
		// will gen a random string using alphabet
		for(int i = 0; i < (randomLength/3); i++)
			randomPattern += Character.toString(ALPHABET.charAt(r.nextInt(ALPHABET.length())));

		for(int i = 0; i < randomLength; i++)
			randomString += Character.toString(ALPHABET.charAt(r.nextInt(ALPHABET.length())));

			// return a string in the format string-striiiing
		System.out.println("Sending random string: " + randomPattern + "-" + randomString);
		return randomPattern + "-" + randomString;
	}
}
